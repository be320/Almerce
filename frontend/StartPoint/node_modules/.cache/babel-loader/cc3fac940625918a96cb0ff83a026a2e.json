{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Almerce\\\\frontend\\\\StartPoint\\\\src\\\\FrontEndDivions\\\\3-Footer\\\\1-FooterGroup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport MicRecorder from 'mic-recorder-to-mp3';\nimport './_Footer.css';\nimport UploadImage from './UploadImage';\nimport VoiceNote from './VoiceNote';\nimport SendArrow from './SendArrow';\nimport TypeArea from './TypeArea';\nimport * as ChatBotActions from '../4-Redux/Actions/ChatBotActions';\nimport MessageTemplate from '../2-Body/MessageTemplate';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nconst FooterContainer = props => {\n  _s();\n\n  const inputRef = useRef();\n  const InitialAudioState = {\n    isRecording: false,\n    blobURL: '',\n    isBlocked: false\n  };\n  const [TextField, setTextField] = useState('');\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [AudioState, setAudioState] = useState(InitialAudioState);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }, () => {\n      setAudioState({\n        isBlocked: false\n      });\n    }, () => {\n      setAudioState({\n        isBlocked: true\n      });\n    }); //API Call \n\n    props.actions.clientSideActions.loadOldMessage();\n  }, []);\n  const Mp3Recorder = React.useMemo(() => new MicRecorder({\n    bitRate: 128\n  }), []);\n\n  const handleTextChange = event => {\n    setTextField(event.target.value);\n  };\n\n  const handleImageInput = event => {\n    setSelectedImage(URL.createObjectURL(event.target.files[0]));\n  };\n\n  const CallFormActions = () => {\n    if (TextField !== '') {\n      props.actions.clientSideActions.sendTemplate({\n        elementType: 'MessageTemplate',\n        serverSide: false,\n        message: {\n          TextField\n        }\n      });\n    }\n\n    if (AudioState.blobURL !== '') {\n      props.actions.clientSideActions.sendTemplate({\n        elementType: 'AudioTemplate',\n        audio: {\n          AudioState\n        }\n      });\n    }\n\n    if (selectedImage !== null) {\n      props.actions.clientSideActions.sendTemplate({\n        elementType: 'ImageTemplate',\n        image: {\n          selectedImage\n        }\n      });\n    }\n\n    if (TextField === '' && AudioState.blobURL === '' && selectedImage === null) {\n      //focus type area when all user inputs are empty\n      inputRef.current.focus();\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    CallFormActions(); //Resetting Form  \n\n    setTextField('');\n    setSelectedImage(null);\n    setAudioState(InitialAudioState);\n  };\n\n  const start = () => {\n    if (AudioState.isBlocked) {\n      console.log('Permission Denied');\n    } else {\n      Mp3Recorder.start().then(() => {\n        setAudioState({\n          isRecording: true\n        });\n      }).catch(e => console.error(e));\n    }\n  };\n\n  const stop = () => {\n    Mp3Recorder.stop().getMp3().then(([buffer, blob]) => {\n      const bu = URL.createObjectURL(blob);\n      setAudioState({\n        blobURL: bu,\n        isRecording: false\n      });\n    }).catch(e => console.log(e));\n  };\n\n  const DeleteVN = () => //user clicked X button\n  {\n    Mp3Recorder.stop();\n    setAudioState(InitialAudioState);\n  };\n\n  const StopRecord = () => {\n    //user clicked send while mic is recording\n    if (AudioState.isRecording) {\n      stop();\n    }\n  };\n\n  const onHeightChange = height => {\n    props.actions.clientSideActions.sendWindowHeight({\n      height: height\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"footer d-flex flex-row justify-content-between align-items-end\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(UploadImage, {\n        ImgInputState: selectedImage,\n        handleImageInput: handleImageInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(VoiceNote, {\n        start: start,\n        stop: stop,\n        DeleteVN: DeleteVN,\n        AudioState: AudioState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TypeArea, {\n        inputRef: inputRef,\n        TextField: TextField,\n        handleTextChange: handleTextChange,\n        onHeightChange: onHeightChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SendArrow, {\n        StopRecord: StopRecord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n}; // this function map the component with the actions\n//so this will be passed to this component via props as if the store \n//is the parent of this component.\n\n\n_s(FooterContainer, \"sbL2bo3MInG78oMpEY56NCpmy6s=\");\n\n_c = FooterContainer;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: {\n      clientSideActions: bindActionCreators(ChatBotActions, dispatch)\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(FooterContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"FooterContainer\");","map":{"version":3,"sources":["D:/Almerce/frontend/StartPoint/src/FrontEndDivions/3-Footer/1-FooterGroup.js"],"names":["React","useEffect","useState","useRef","MicRecorder","UploadImage","VoiceNote","SendArrow","TypeArea","ChatBotActions","MessageTemplate","connect","bindActionCreators","FooterContainer","props","inputRef","InitialAudioState","isRecording","blobURL","isBlocked","TextField","setTextField","selectedImage","setSelectedImage","AudioState","setAudioState","navigator","mediaDevices","getUserMedia","audio","actions","clientSideActions","loadOldMessage","Mp3Recorder","useMemo","bitRate","handleTextChange","event","target","value","handleImageInput","URL","createObjectURL","files","CallFormActions","sendTemplate","elementType","serverSide","message","image","current","focus","handleSubmit","preventDefault","start","console","log","then","catch","e","error","stop","getMp3","buffer","blob","bu","DeleteVN","StopRecord","onHeightChange","height","sendWindowHeight","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState,useRef} from \"react\"\r\nimport MicRecorder from 'mic-recorder-to-mp3'\r\nimport './_Footer.css'\r\nimport UploadImage from './UploadImage'\r\nimport VoiceNote from './VoiceNote'\r\nimport SendArrow from './SendArrow'\r\nimport TypeArea from './TypeArea'\r\nimport * as ChatBotActions from '../4-Redux/Actions/ChatBotActions'\r\nimport MessageTemplate from '../2-Body/MessageTemplate'\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\n\r\nconst FooterContainer = (props) => {  \r\n  const inputRef = useRef();\r\n  const InitialAudioState = {\r\n    isRecording: false,\r\n    blobURL: '',\r\n    isBlocked: false,\r\n  }\r\n  const [TextField, setTextField] = useState('');\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [AudioState, setAudioState] = useState(InitialAudioState);\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices.getUserMedia({ audio: true },\r\n      () => {\r\n        setAudioState({ isBlocked: false });\r\n      },\r\n      () => { setAudioState({ isBlocked: true }); });\r\n\r\n      //API Call \r\n     props.actions.clientSideActions.loadOldMessage();\r\n     \r\n  }, []);\r\n\r\n  const Mp3Recorder = React.useMemo(() => new MicRecorder({\r\n    bitRate: 128\r\n  }), []);\r\n\r\n  const handleTextChange = (event) => {\r\n    setTextField(event.target.value);\r\n  }\r\n\r\n  const handleImageInput = (event) => {\r\n    setSelectedImage(URL.createObjectURL(event.target.files[0]));\r\n  }\r\n\r\n  const CallFormActions = () => {\r\n    if (TextField !== '')\r\n    {\r\n      \r\n      props.actions.clientSideActions.sendTemplate(\r\n        {\r\n          elementType: 'MessageTemplate',\r\n          serverSide:false ,\r\n          message:{TextField}\r\n        }\r\n        );\r\n    }\r\n    if (AudioState.blobURL !== '')\r\n    {\r\n      props.actions.clientSideActions.sendTemplate(\r\n        {\r\n          elementType: 'AudioTemplate',\r\n          audio:{AudioState}\r\n        }\r\n        );\r\n    }\r\n    if (selectedImage !== null)\r\n    {\r\n      props.actions.clientSideActions.sendTemplate(\r\n        {\r\n          elementType: 'ImageTemplate',\r\n          image:{selectedImage}\r\n        }\r\n        );\r\n    }\r\n    if (TextField === '' && AudioState.blobURL === '' && selectedImage === null){\r\n      //focus type area when all user inputs are empty\r\n      inputRef.current.focus();\r\n    }\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    CallFormActions();\r\n   //Resetting Form  \r\n    setTextField('');\r\n    setSelectedImage(null);\r\n    setAudioState(InitialAudioState);\r\n  }\r\n  const start = () => {\r\n\r\n    if (AudioState.isBlocked) {\r\n      console.log('Permission Denied');\r\n    } else {\r\n      Mp3Recorder.start().then(() => {\r\n        setAudioState({ isRecording: true });\r\n      }).catch((e) => console.error(e));\r\n    }\r\n  };\r\n  const stop = () => {\r\n    Mp3Recorder\r\n      .stop()\r\n      .getMp3()\r\n      .then(([buffer, blob]) => {\r\n        const bu = URL.createObjectURL(blob)\r\n        setAudioState({ blobURL: bu, isRecording: false });\r\n      }).catch((e) => console.log(e));\r\n  };\r\n\r\n  const DeleteVN =() => //user clicked X button\r\n  {\r\n    Mp3Recorder.stop()\r\n    setAudioState(InitialAudioState);\r\n  };\r\n  const StopRecord = () => { //user clicked send while mic is recording\r\n\r\n    if (AudioState.isRecording)\r\n  {\r\n    stop();\r\n  }\r\n  }\r\n  \r\n\r\n  const onHeightChange = (height)=>{\r\n    props.actions.clientSideActions.sendWindowHeight(\r\n      {\r\n        height: height\r\n      }\r\n      );\r\n\r\n  }\r\n\r\n  return <>\r\n  <form  className=\"footer d-flex flex-row justify-content-between align-items-end\" onSubmit={handleSubmit}>\r\n  <UploadImage ImgInputState={selectedImage} handleImageInput={handleImageInput} />\r\n      <VoiceNote start={start} stop={stop} DeleteVN={DeleteVN} AudioState={AudioState} />\r\n      <TypeArea  inputRef={inputRef} TextField={TextField} handleTextChange={handleTextChange}\r\n      onHeightChange={onHeightChange}/>\r\n      {/* <Emoji TextField={TextField} setTextField={setTextField}/> */}\r\n      <SendArrow StopRecord={StopRecord}/>\r\n    </form>\r\n  </>\r\n\r\n}\r\n\r\n\r\n// this function map the component with the actions\r\n//so this will be passed to this component via props as if the store \r\n//is the parent of this component.\r\nconst mapDispatchToProps=(dispatch)=>{\r\n  return{\r\n    actions: {\r\n      clientSideActions: bindActionCreators(ChatBotActions, dispatch),\r\n    },\r\n  };\r\n}\r\nexport default connect(null, mapDispatchToProps)(FooterContainer);\r\n\r\n"]},"metadata":{},"sourceType":"module"}