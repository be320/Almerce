{"ast":null,"code":"// The type of action or the intent needs to be implemented \nimport Constants from './_ActionTypesConst';\nimport AxiosInstance from '../../5-Axios/AxiosConfiguration'; // use this format in case you will use bindActionCreators\n\nconst apiCallAction = () => {\n  return {\n    type: Constants.BEGIN_API_CALL\n  };\n};\n\nconst sendTemplateSuccess = Template => {\n  if (Template.elementType === \"MessageTemplate\") {\n    return {\n      type: Constants.SUBMIT_TEXTAREA,\n      messageTemplate: Template\n    };\n  } else if (Template.elementType === \"AudioTemplate\") {\n    return {\n      type: Constants.SUBMIT_VOICENOTE,\n      audioTemplate: Template\n    };\n  } else if (Template.elementType === \"ImageTemplate\") {\n    return {\n      type: Constants.SUBMIT_IMAGE,\n      imageTemplate: Template\n    };\n  }\n};\n\nconst loadOldMessageSuccess = Templates => {\n  return {\n    type: Constants.RECEIVED_OLD_MESSAGES,\n    messageTemplates: Templates\n  };\n};\n\nexport const sendWindowHeight = height => {\n  return {\n    type: Constants.CHANGE_WINDOW_SIZE,\n    height: height\n  };\n};\nexport const loadOldMessage = () => {\n  return dispatch => {\n    dispatch(apiCallAction());\n    return AxiosInstance.post('/v1/301df99f').then(Templates => {\n      dispatch(loadOldMessageSuccess(Templates.data));\n    }).catch(errorMessage => {\n      throw errorMessage;\n    });\n  };\n};\nexport const sendTemplate = Template => {\n  return dispatch => {\n    console.log(Template);\n    dispatch(apiCallAction());\n    return AxiosInstance.put('/test', {\n      // place here your object \n      Template\n    }).then(response => {\n      console.log(response.data);\n      dispatch(sendTemplateSuccess(response.data.Template));\n      dispatch(sendTemplateSuccess(Template));\n    }).catch(errorMessage => {\n      console.log(errorMessage);\n    });\n  };\n};","map":{"version":3,"sources":["D:/Almerce/frontend/StartPoint/src/FrontEndDivions/4-Redux/Actions/ChatBotActions.js"],"names":["Constants","AxiosInstance","apiCallAction","type","BEGIN_API_CALL","sendTemplateSuccess","Template","elementType","SUBMIT_TEXTAREA","messageTemplate","SUBMIT_VOICENOTE","audioTemplate","SUBMIT_IMAGE","imageTemplate","loadOldMessageSuccess","Templates","RECEIVED_OLD_MESSAGES","messageTemplates","sendWindowHeight","height","CHANGE_WINDOW_SIZE","loadOldMessage","dispatch","post","then","data","catch","errorMessage","sendTemplate","console","log","put","response"],"mappings":"AAAA;AAEA,OAAOA,SAAP,MAAsB,qBAAtB;AACA,OAAOC,aAAP,MAA0B,kCAA1B,C,CAEA;;AAEA,MAAMC,aAAa,GAAC,MAAK;AACrB,SAAO;AACLC,IAAAA,IAAI,EAAEH,SAAS,CAACI;AADX,GAAP;AAGD,CAJH;;AAMA,MAAMC,mBAAmB,GAAGC,QAAD,IAAY;AACnC,MAAGA,QAAQ,CAACC,WAAT,KAAyB,iBAA5B,EACA;AACI,WAAM;AACNJ,MAAAA,IAAI,EAAEH,SAAS,CAACQ,eADV;AAENC,MAAAA,eAAe,EAAEH;AAFX,KAAN;AAIH,GAND,MAOK,IAAIA,QAAQ,CAACC,WAAT,KAAyB,eAA7B,EACL;AACI,WAAM;AACFJ,MAAAA,IAAI,EAAEH,SAAS,CAACU,gBADd;AAEFC,MAAAA,aAAa,EAAEL;AAFb,KAAN;AAIH,GANI,MAOA,IAAIA,QAAQ,CAACC,WAAT,KAAyB,eAA7B,EACL;AACI,WAAM;AACFJ,MAAAA,IAAI,EAAEH,SAAS,CAACY,YADd;AAEFC,MAAAA,aAAa,EAAEP;AAFb,KAAN;AAIH;AACJ,CAtBD;;AAwBA,MAAMQ,qBAAqB,GAAGC,SAAD,IAAa;AACtC,SAAM;AACNZ,IAAAA,IAAI,EAAEH,SAAS,CAACgB,qBADV;AAENC,IAAAA,gBAAgB,EAAEF;AAFZ,GAAN;AAKH,CAND;;AAOA,OAAO,MAAMG,gBAAgB,GAAEC,MAAD,IAAU;AACpC,SAAM;AACFhB,IAAAA,IAAI,EAAEH,SAAS,CAACoB,kBADd;AAEFD,IAAAA,MAAM,EAAEA;AAFN,GAAN;AAKH,CANM;AAOP,OAAO,MAAME,cAAc,GAAC,MAAK;AAC7B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACpB,aAAa,EAAd,CAAR;AACA,WAAQD,aAAa,CAACsB,IAAd,CAAmB,cAAnB,EACPC,IADO,CACDT,SAAD,IAAa;AACjBO,MAAAA,QAAQ,CAACR,qBAAqB,CAACC,SAAS,CAACU,IAAX,CAAtB,CAAR;AACH,KAHS,EAGPC,KAHO,CAGAC,YAAD,IAAgB;AACrB,YAAMA,YAAN;AACH,KALS,CAAR;AAMD,GARD;AASH,CAVM;AAYP,OAAO,MAAMC,YAAY,GAAEtB,QAAD,IAAY;AAClC,SAAQgB,QAAD,IAAY;AACfO,IAAAA,OAAO,CAACC,GAAR,CAAYxB,QAAZ;AACAgB,IAAAA,QAAQ,CAACpB,aAAa,EAAd,CAAR;AACA,WAAQD,aAAa,CAAC8B,GAAd,CAAkB,OAAlB,EAA0B;AAC9B;AACAzB,MAAAA;AAF8B,KAA1B,EAGLkB,IAHK,CAGCQ,QAAD,IAAY;AAChBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,QAAQ,CAACP,IAArB;AACAH,MAAAA,QAAQ,CAACjB,mBAAmB,CAAC2B,QAAQ,CAACP,IAAT,CAAcnB,QAAf,CAApB,CAAR;AACAgB,MAAAA,QAAQ,CAACjB,mBAAmB,CAACC,QAAD,CAApB,CAAR;AACH,KAPO,EAOLoB,KAPK,CAOEC,YAAD,IAAgB;AACrBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACH,KATO,CAAR;AAWH,GAdD;AAeH,CAhBM","sourcesContent":["// The type of action or the intent needs to be implemented \r\n\r\nimport Constants from './_ActionTypesConst'\r\nimport AxiosInstance from '../../5-Axios/AxiosConfiguration'\r\n\r\n// use this format in case you will use bindActionCreators\r\n\r\nconst apiCallAction=()=> {\r\n    return {\r\n      type: Constants.BEGIN_API_CALL,\r\n    };\r\n  }\r\n\r\nconst sendTemplateSuccess =(Template)=>{\r\n    if(Template.elementType === \"MessageTemplate\")\r\n    {\r\n        return{\r\n        type: Constants.SUBMIT_TEXTAREA,\r\n        messageTemplate: Template,\r\n        }\r\n    }\r\n    else if (Template.elementType === \"AudioTemplate\")\r\n    {\r\n        return{\r\n            type: Constants.SUBMIT_VOICENOTE,\r\n            audioTemplate: Template,\r\n        }\r\n    }\r\n    else if (Template.elementType === \"ImageTemplate\")\r\n    {\r\n        return{\r\n            type: Constants.SUBMIT_IMAGE,\r\n            imageTemplate: Template,\r\n        }\r\n    }\r\n}\r\n\r\nconst loadOldMessageSuccess =(Templates)=>{\r\n    return{\r\n    type: Constants.RECEIVED_OLD_MESSAGES,\r\n    messageTemplates: Templates,\r\n}\r\n\r\n}\r\nexport const sendWindowHeight=(height)=>{\r\n    return{\r\n        type: Constants.CHANGE_WINDOW_SIZE,\r\n        height: height,\r\n    }\r\n\r\n}\r\nexport const loadOldMessage=()=> {\r\n    return (dispatch) => {\r\n      dispatch(apiCallAction());\r\n      return  AxiosInstance.post('/v1/301df99f')\r\n      .then((Templates)=>{\r\n        dispatch(loadOldMessageSuccess(Templates.data));\r\n    }).catch((errorMessage)=>{\r\n        throw errorMessage;\r\n    });\r\n    };\r\n}\r\n  \r\nexport const sendTemplate=(Template)=>{\r\n    return((dispatch)=>{\r\n        console.log(Template);\r\n        dispatch(apiCallAction());\r\n        return  AxiosInstance.put('/test',{\r\n            // place here your object \r\n            Template\r\n        }).then((response)=>{\r\n            console.log(response.data);\r\n            dispatch(sendTemplateSuccess(response.data.Template))\r\n            dispatch(sendTemplateSuccess(Template))\r\n        }).catch((errorMessage)=>{\r\n            console.log(errorMessage);\r\n        });\r\n\r\n    });\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}